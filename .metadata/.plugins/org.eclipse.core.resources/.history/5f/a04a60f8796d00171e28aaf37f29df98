package work.model.service;

import java.util.ArrayList;

import work.model.dao.BiasDao;
import work.model.dao.ChannelDao;
import work.model.dao.DialogDao;
import work.model.dao.LikesDao;
import work.model.dao.MemberDao;
import work.model.dao.MessageDao;
import work.model.dao.OpinionDao;
import work.model.dao.TeamDao;
import work.model.dao.TeamMemberDao;
import work.model.dao.VoteDao;
import work.model.dto.Bias;
import work.model.dto.Channel;
import work.model.dto.Dialog;
import work.model.dto.Likes;
import work.model.dto.Member;
import work.model.dto.Message;
import work.model.dto.Opinion;
import work.model.dto.Team;
import work.model.dto.Vote;

public class TeamService {
	public static TeamService instance = new TeamService();
	private TeamDao teamDao = new TeamDao();
	private TeamMemberDao teamMemberDao = new TeamMemberDao();
	private MessageDao messageDao = new MessageDao();
	private BiasDao biasDao = new BiasDao();
	private VoteDao voteDao = new VoteDao();
	private OpinionDao opinionDao = new OpinionDao();
	private DialogDao dialogDao = new DialogDao();
	private LikesDao likesDao = new LikesDao();
	private MemberDao memberDao = new MemberDao();
	private ChannelDao channelDao = new ChannelDao();

	private TeamService() {

	}

	public static TeamService getInstance() {
		return instance;
	}

	public Boolean stringMakeBoolean(String bool) {
		if (bool.equalsIgnoreCase("TRUE")) {
			return true;
		} else if (bool.equalsIgnoreCase("FALSE")) {
			return false;
		}
		return null;
	}

	/**
	 * 중보되는 Team이름 검사 후 Team 생성, team_member 테이블에 team, nickname 추가 team 있을시
	 * false return
	 */
	// 이미 팀 이름이 있는지 유효성 검사해야함.
	public boolean makeTeam(String nickname, String teamName, String subject, Boolean open) {
		ArrayList<Team> teamList = teamDao.selectAll();
		for (int i = 0; i < teamList.size(); ++i) {
			if (teamList.get(i).getTeamName().equals(teamName)) {
				return false; // 같은 팀이름 존재
			}
		}
		String strOpen = null;
		if (open == true) {
			strOpen = "TRUE";
		} else {
			strOpen = "FALSE";
		}
		Team dto = new Team(teamName, subject, strOpen);
		teamDao.insert(dto);
		teamMemberDao.insert(teamName, nickname);
		return true;
	}

	public boolean setOpen(String teamName) {
		ArrayList<Team> teamList = new ArrayList<Team>();
		for (int i = 0; i < teamList.size(); ++i) {
			if (teamList.get(i).getTeamName().equals(teamName)) {
				teamDao.setOpen(teamName);
				return true;
			}
		}
		return false;
	}

	// 작성자가 수신자에게 메시지를 보냄
	public void makeMessage(String writer, String receiver, String content) {
		Message message = new Message(content, writer, receiver, "false");
		messageDao.insert(message);
	}

	// 사용자한테 닉네임, 경향명, 내용을 받아서 만들면됩니다.
	public boolean makeOpinion(String nickname, String voteName, String biasName, String content) {
		ArrayList<Bias> biasList = biasDao.selectAll();
		ArrayList<Vote> voteList = voteDao.selectAll();
		Opinion opinion = null;
		int biasId = 0;
		int voteId = 0;
		for (int i = 0; i < voteList.size(); ++i) {
			if (voteList.get(i).getNickname().equals(voteName)) {
				for (int j = 0; j < biasList.size(); ++j) {
					if (biasList.get(j).getBiasName().equals(biasName)) {
						voteId = voteList.get(i).getVoteId();
						biasId = biasList.get(j).getBiasId();
					}
				}
			}
		}
		if (biasId != 0) {
			opinion = new Opinion(nickname, biasId, content);
			opinionDao.insert(opinion);
			return true;
		}
		return false;
	}

	// 사용자에게 닉네임과 경향명,투표명,팀명을 받아서 의견을 삭제합니다.
	public boolean deleteOpinion(String nickname, String biasName, String voteName, String teamName) {
		ArrayList<Vote> voteList = voteDao.selectAll();
		ArrayList<Bias> biasList = biasDao.selectAll();
		int voteId = 0;
		int biasId = 0;
		for (int i = 0; i < voteList.size(); ++i) {
			if (voteList.get(i).getNickname().equals(voteName)) {
				for (int j = 0; j < biasList.size(); ++j) {
					if (biasList.get(j).getBiasName().equals(biasName)) {
						voteId = voteList.get(i).getVoteId();
						biasId = biasList.get(j).getBiasId();
					}
				}
			}
		}
		if (voteId != 0 && biasId != 0) {
			opinionDao.delete(biasId);
			return true;
		}
		return false;
	}

	/**
	 * <pre>
	 * 	
	 * 사용자에게서 작성자와 작성일을 받아서 다이얼로그의 id를 특정화 시킨 후 그걸 바탕으로 좋아요를 찾아내서 그 좋아요가 만약 만들어져있지 않다면
	 * 좋아요를 새로만들고 있다면 없애버린다. 없애면 false를 반환하고 생성시켰다면 true를 반환한다.
	 * </pre>
	 */

	/*
	 * writer = member의 nickname liker = member의 nickname
	 */
	public boolean likesOpinion(String writer, String writeDate, String liker) {
		Dialog dialog = dialogDao.selectOne(writer, writeDate);
		int dialogId = dialog.getDialogId();
		Likes dto = likesDao.selectOne(dialogId);
		if (dto == null) {
			likesDao.insert(dto);
			return true;
		} else {
			likesDao.delete(dialogId);
			return false;
		}
	}

	/**
	 * <pre>
	 * 사용자에게 경향명,투표명,팀명을 받아서 경향하나를 특정화시켜서 경향 ID를 받고 이 값과 닉네임을 이용해서 의견을 특정화시킨다.
	 * 그렇게 특정화 시켜서 내용을 수정함.
	 * </pre>
	 */
	public boolean editOpinion(String nickname, String biasName, String voteName, String teamName, String content) {
		ArrayList<Bias> biasList = biasDao.selectAll();
		ArrayList<Vote> voteList = voteDao.selectAll();
		Opinion dto = null;
		int biasId = 0;
		int voteId = 0;

		// biasList, voteList에서 각각의 이름에 맞는 voteId, biasId 검색 후 set.
		for (int i = 0; i < voteList.size(); ++i) {
			if (voteList.get(i).getNickname().equals(voteName)) {
				for (int j = 0; j < biasList.size(); ++j) {
					if (biasList.get(i).getBiasName().equals(biasName)) {
						voteId = voteList.get(i).getVoteId();
						biasId = biasList.get(j).getBiasId();
					}
				}
			}
		}
		// bias와 vote 없으면 false
		// 둘다 0이 아니면 dto set하고 opinion update.
		if (biasId == 0 || voteId == 0) {
			return false;
		} else {
			dto.setBiasId(biasId);
			dto.setContent(content);
			dto.setNickname(nickname);
			opinionDao.update(dto);
			return true;
		}
	}

	/**
	 * <pre>
	 * 사용자에게 id와 team이름을 받아서 사용자가 team에서 탈퇴함.
	 * </pre>
	 */
	public boolean dropTeam(String memberId, String teamName) {
		String nickname = null;
		ArrayList<Member> memberList = memberDao.selectAll();
		for (int i = 0; i < memberList.size(); ++i) {
			if (memberList.get(i).getMemberId().equals(memberId)) {
				nickname = memberList.get(i).getNickname();
			}
		}
		/*
		 * memberId와 맞는 사용자 nickname 검색 후 nickname이 null이면 false return null이
		 * 아니면 teamMember table에서 삭제 후 return true
		 */
		if (nickname == null) {
			return false;
		} else {
			teamMemberDao.delete(teamName, nickname);
			return true;
		}
	}

	public ArrayList<String> teamHasChannel(String teamName) {
		ArrayList<String> channelNameList = new ArrayList<>();
		ArrayList<Channel> channelList = channelDao.selectAll();
		for (Channel c : channelList) {
			if (c.getTeamName().equals(teamName)) {
				channelNameList.add(c.getChannelName());
			}
		}
		return channelNameList;
	}

	public boolean existChart(String teamName) {
		ArrayList<Vote> voteList = voteDao.selectAll();
		for (Vote v : voteList) {
			if (v.getTeamName().equals(teamName)) {
				return true;
			}
		}
		return false;
	}

	public boolean makeVote(String voteName, String teamName) {
		voteDao.insert(new Vote(voteName, teamName));
		return true;
	}

	public String getVote(String teamName) {
		ArrayList<Vote> voteList = voteDao.selectAll();
		for (Vote v : voteList) {
			if (v.getTeamName().equals(teamName)) {
				return v.getNickname();
			}
		}
		return null;
	}

	public ArrayList<Bias> getVoteBias(String voteName) {
		ArrayList<Bias> list = new ArrayList<>();
		ArrayList<Bias> biasList = biasDao.selectAll();
		Integer ID = null;
		for (Vote v : voteDao.selectAll()) {
			if (v.getNickname().equals(voteName)) {
				ID = v.getVoteId();
			}
		}
		if (ID != null) {
			for (Bias b : biasList) {
				if(b.getBiasId()==ID){
					list.add(b);
				}
			}
		}
		return list;
	}
	
	public ArrayList<Opinion> getVoteOpinion(String voteName){
		ArrayList<Opinion> list = new ArrayList<>();
		ArrayList<Bias> biasList = getVoteBias(voteName);
		ArrayList<Opinion> opinionList = opinionDao.selectAll();
		for(Opinion o : opinionList){
			for(Bias b : biasList){
				if(o.getBiasId()==b.getBiasId()){
					list.add(o);
				}
			}
		}
		return list;
	}
}