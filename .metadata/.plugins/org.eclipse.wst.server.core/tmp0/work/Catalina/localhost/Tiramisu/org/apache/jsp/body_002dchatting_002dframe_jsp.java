/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.16
 * Generated at: 2017-07-20 15:30:16 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import work.model.dto.Dialog;
import java.util.ArrayList;
import work.model.service.DialogService;
import work.model.dao.DialogDao;

public final class body_002dchatting_002dframe_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("work.model.service.DialogService");
    _jspx_imports_classes.add("work.model.dao.DialogDao");
    _jspx_imports_classes.add("work.model.dto.Dialog");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	request.setCharacterEncoding("utf-8");

      out.write("\r\n");
      out.write("\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=euc-kr\" />\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("Date.prototype.format = function(f) {\r\n");
      out.write("    if (!this.valueOf()) return \" \";\r\n");
      out.write(" \r\n");
      out.write("    var weekName = [\"일요일\", \"월요일\", \"화요일\", \"수요일\", \"목요일\", \"금요일\", \"토요일\"];\r\n");
      out.write("    var d = this;\r\n");
      out.write("     \r\n");
      out.write("    return f.replace(/(yyyy|yy|MM|dd|E|hh|mm|ss|a\\/p)/gi, function($1) {\r\n");
      out.write("        switch ($1) {\r\n");
      out.write("            case \"yyyy\": return d.getFullYear();\r\n");
      out.write("            case \"yy\": return (d.getFullYear() % 1000).zf(2);\r\n");
      out.write("            case \"MM\": return (d.getMonth() + 1).zf(2);\r\n");
      out.write("            case \"dd\": return d.getDate().zf(2);\r\n");
      out.write("            case \"E\": return weekName[d.getDay()];\r\n");
      out.write("            case \"HH\": return d.getHours().zf(2);\r\n");
      out.write("            case \"hh\": return ((h = d.getHours() % 12) ? h : 12).zf(2);\r\n");
      out.write("            case \"mm\": return d.getMinutes().zf(2);\r\n");
      out.write("            case \"ss\": return d.getSeconds().zf(2);\r\n");
      out.write("            case \"a/p\": return d.getHours() < 12 ? \"AM\" : \"PM\";\r\n");
      out.write("            default: return $1;\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("};\r\n");
      out.write(" \r\n");
      out.write("String.prototype.string = function(len){var s = '', i = 0; while (i++ < len) { s += this; } return s;};\r\n");
      out.write("String.prototype.zf = function(len){return \"0\".string(len - this.length) + this;};\r\n");
      out.write("Number.prototype.zf = function(len){return this.toString().zf(len);};\r\n");
      out.write("\r\n");
      out.write("\tvar textarea = document.getElementById(\"chat\");\r\n");
      out.write("\tvar webSocket = new WebSocket('ws://164.125.34.38:8070/Tiramisu/broadcasting');\r\n");
      out.write("\tvar inputMessage = document.getElementById('dialogInput');\r\n");
      out.write("\tvar nickname = null;\r\n");
      out.write("\tvar time = null;\r\n");
      out.write("\tvar content = null;\r\n");
      out.write("\twebSocket.onerror = function(event) {\r\n");
      out.write("\t\tonError(event)\r\n");
      out.write("\t};\r\n");
      out.write("\twebSocket.onopen = function(event) {\r\n");
      out.write("\t\tonOpen(event)\r\n");
      out.write("\t};\r\n");
      out.write("\twebSocket.onmessage = function(event) {\r\n");
      out.write("\t\tonMessage(event)\r\n");
      out.write("\t};\r\n");
      out.write("\tfunction onMessage(event) {\r\n");
      out.write("\t\tvar recMessage = event.data;\r\n");
      out.write("\t\tconsole.log(recMessage);\r\n");
      out.write("\t\trecMessage = recMessage.split('`');\r\n");
      out.write("\t\tteamName=recMessage[0];\r\n");
      out.write("\t\tchannelName=recMessage[1];\r\n");
      out.write("\t\tnickname=recMessage[2];\r\n");
      out.write("\t\ttime=recMessage[3];\r\n");
      out.write("\t\tcontent=recMessage[4];\r\n");
      out.write("\t\tconsole.log(recMessage[0]);\r\n");
      out.write("\t\tconsole.log(recMessage[1]);\r\n");
      out.write("\t\tconsole.log(recMessage[2]);\r\n");
      out.write("\t\tconsole.log(recMessage[3]);\r\n");
      out.write("\t\tconsole.log(recMessage[4]);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif(teamName=='");
      out.print(session.getAttribute("teamName"));
      out.write("'&&channelName=='");
      out.print(session.getAttribute("channelName"));
      out.write("'){\r\n");
      out.write("\t\t\ttextarea.innerHTML += '<li class=\"left clearfix\"><span class=\"chat-img pull-left\">\\\r\n");
      out.write("\t\t\t\t<img src=\"images/tirami.PNG\" alt=\"User Avatar\">\\\r\n");
      out.write("\t\t\t</span>\\\r\n");
      out.write("\t\t\t\t<div class=\"chat-body clearfix\">\\\r\n");
      out.write("\t\t\t\t\t<div class=\"header\">\\\r\n");
      out.write("\t\t\t\t\t\t<strong class=\"primary-font\">'+ recMessage[2] +'</strong> <small\\\r\n");
      out.write("\t\t\t\t\t\t\tclass=\"pull-right text-muted\"><i class=\"fa fa-clock-o\"></i> '+ recMessage[3] +'</small>\\\r\n");
      out.write("\t\t\t\t\t</div>\\\r\n");
      out.write("\t\t\t\t\t<p>'+ recMessage[4] +'</p>\\\r\n");
      out.write("\t\t\t\t</div></li>';\r\n");
      out.write("\t\t\t//textarea.value += \"상대 : \" + event.data + \"\\n\";\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\tfunction onOpen(event) {\r\n");
      out.write("\t\tconsole.log(\"연결 성공\\n\");\r\n");
      out.write("\t}\r\n");
      out.write("\tfunction onError(event) {\r\n");
      out.write("\t\talert(event.data);\r\n");
      out.write("\t}\r\n");
      out.write("\tfunction send() {\r\n");
      out.write("\t\tteamName = \"");
      out.print(session.getAttribute("teamName"));
      out.write("\";\r\n");
      out.write("\t\tchannelName = \"");
      out.print(session.getAttribute("channelName"));
      out.write("\";\r\n");
      out.write("\t\tcontent = document.getElementById(\"dialogInput\").value;\r\n");
      out.write("\t\ttime = new Date().format(\"yyyy-MM-dd a/p hh:mm:ss\");\r\n");
      out.write("\t\tnickname = \"");
      out.print(session.getAttribute("nickname"));
      out.write("\";\r\n");
      out.write("\t\ttextarea.innerHTML += '<li class=\"right clearfix\"><span class=\"chat-img pull-right\">\\\r\n");
      out.write("\t\t\t<img src=\"images/me.jpg\" alt=\"User Avatar\">\\\r\n");
      out.write("\t\t</span>\\\r\n");
      out.write("\t\t\t<div class=\"chat-body clearfix\">\\\r\n");
      out.write("\t\t\t\t<div class=\"header\">\\\r\n");
      out.write("\t\t\t\t\t<strong class=\"primary-font\">'\r\n");
      out.write("\t\t\t\t+ nickname\r\n");
      out.write("\t\t\t\t+ '</strong> <small\\\r\n");
      out.write("\t\t\t\t\t\tclass=\"pull-right text-muted\"><i class=\"fa fa-clock-o\"></i> '\r\n");
      out.write("\t\t\t\t+ time\r\n");
      out.write("\t\t\t\t+ '</small>\\\r\n");
      out.write("\t\t\t\t</div>\\\r\n");
      out.write("\t\t\t\t<p>'\r\n");
      out.write("\t\t\t\t+ content\r\n");
      out.write("\t\t\t\t+ '</p>\\\r\n");
      out.write("\t\t\t</div></li>';\r\n");
      out.write("\t\tsendMessage = teamName + \"`\" + channelName + \"`\" + nickname + \"`\"\r\n");
      out.write("\t\t\t\t+ time + \"`\" + content;\r\n");
      out.write("\t\tconsole.log(sendMessage);\r\n");
      out.write("\t\twebSocket.send(sendMessage);\r\n");
      out.write("\t\tinputMessage.value = \"\";\r\n");
      out.write("\t}\r\n");
      out.write("\t/*Debug function*/\r\n");
      out.write("\tfunction dialogSubmit() {\r\n");
      out.write("\t\t/*document.writeln(content);\r\n");
      out.write("\t\tdocument.writeln(time);\r\n");
      out.write("\t\tdocument.writeln(nickname);*/\r\n");
      out.write("\t}\r\n");
      out.write("\t$(document).ready(function(){\r\n");
      out.write("\t\t$('#chatSub').click(function(){\r\n");
      out.write("\t\t\t$('#list').load('right-chatting-frame.jsp');\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t});\r\n");
      out.write("\t});\r\n");
      out.write("\tfunction chatClick(nick){\r\n");
      out.write("\t\t$('#list').load('right-chatting-frame.jsp',{nickname:nick,teamName:'");
      out.print(session.getAttribute("teamName"));
      out.write("'});\r\n");
      out.write("\t}\r\n");
      out.write("</script>\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("<script\r\n");
      out.write("\tsrc=\"https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js\"></script>\r\n");
      out.write("<link\r\n");
      out.write("\thref=\"http://netdna.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css\"\r\n");
      out.write("\trel=\"stylesheet\">\r\n");
      out.write("<link href=\"css/chatting.css\" rel=\"stylesheet\">\r\n");
      out.write("<link\r\n");
      out.write("\thref=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css\"\r\n");
      out.write("\trel=\"stylesheet\">\r\n");
      out.write("<div class=\"container bootstrap snippet\">\r\n");
      out.write("\t<div class=\"row\">\r\n");
      out.write("\r\n");
      out.write("\t\t<!--=========================================================-->\r\n");
      out.write("\t\t<!-- selected chat -->\r\n");
      out.write("\t\t<div class=\"col-md-8 bg-white \">\r\n");
      out.write("\t\t\t<div style=\"overflow-y: scroll; height: 700px;\">\r\n");
      out.write("\t\t\t\t<div class=\"chat-message\">\r\n");
      out.write("\t\t\t\t\t<ul class=\"chat\" id=\"chat\">\r\n");
      out.write("\t\t\t\t\t\t");

							DialogService service = DialogService.getInstance();
							ArrayList<Dialog> dialogList = service.inTeamChannelDialog((String) session.getAttribute("teamName"),
									(String) session.getAttribute("channelName"));
							for (Dialog d : dialogList) {
								if (d.getWriter().equals((String) session.getAttribute("nickname"))) {
								
      out.write("\r\n");
      out.write("\t\t\t\t\t\t<li class=\"right clearfix\"><span class=\"chat-img pull-right\" id=\"chatSub\" onclick=\"chatClick('");
      out.print(d.getWriter());
      out.write("')\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<img src=\"images/me.jpg\" alt=\"User Avatar\">\r\n");
      out.write("\t\t\t\t\t\t</span>\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"chat-body clearfix\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"header\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<strong class=\"primary-font\" id=\"prime\">");
      out.print(d.getWriter());
      out.write("</strong> <small\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tclass=\"pull-right text-muted\"><i class=\"fa fa-clock-o\"></i>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t");
      out.print(d.getWriteDate());
      out.write("</small>\r\n");
      out.write("\t\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t\t<p>");
      out.print(d.getContent());
      out.write("</p>\r\n");
      out.write("\t\t\t\t\t\t\t</div></li>\r\n");
      out.write("\t\t\t\t\t\t");

							} else {
						
      out.write("\r\n");
      out.write("\t\t\t\t\t\t<li class=\"left clearfix\"><span class=\"chat-img pull-left\" onclick=\"chatClick('");
      out.print(d.getWriter());
      out.write("')\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<img src=\"images/tirami.PNG\" alt=\"User Avatar\">\r\n");
      out.write("\t\t\t\t\t\t</span>\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"chat-body clearfix\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"header\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<strong class=\"primary-font\">");
      out.print(d.getWriter());
      out.write("</strong> <small\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tclass=\"pull-right text-muted\"><i class=\"fa fa-clock-o\"></i>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t");
      out.print(d.getWriteDate());
      out.write("</small>\r\n");
      out.write("\t\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t\t<p>");
      out.print(d.getContent());
      out.write("</p>\r\n");
      out.write("\t\t\t\t\t\t\t</div></li>\r\n");
      out.write("\t\t\t\t\t\t");

							}
							}
						
      out.write("\r\n");
      out.write("\t\t\t\t\t</ul>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<div class=\"chat-box bg-white\">\r\n");
      out.write("\t\t\t\t<div class=\"input-group\">\r\n");
      out.write("\t\t\t\t\t<input class=\"form-control border no-shadow no-rounded\"\r\n");
      out.write("\t\t\t\t\t\tplaceholder=\"Type your message here\" id=\"dialogInput\"> <span\r\n");
      out.write("\t\t\t\t\t\tclass=\"input-group-btn\">\r\n");
      out.write("\t\t\t\t\t\t<button class=\"btn btn-success no-rounded\" type=\"button\"\r\n");
      out.write("\t\t\t\t\t\t\tonclick=\"send()\">Send</button>\r\n");
      out.write("\t\t\t\t\t</span>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<!-- /input-group -->\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<!--오른쪽 면 -->\r\n");
      out.write("\t\t<div id=\"list\">\r\n");
      out.write("\t</div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");

	//This scritp was occured error.

      out.write("\r\n");
      out.write("<!--  <script src=\"http://netdna.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js\"></script>-->\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
